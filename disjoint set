class DisjointSet 
{
    vector<int>rank,parent,size;
    
    public:
     DisjointSet(int n)
     {
         rank.resize(n+1,0);
         size.resize(n+1,1);
         parent.resize(n+1);
         
         for(int i=0;i<n;i++)
         {
             parent[i]=i;
         }
     }
     
     int findUParent(int u)
      {
          if(u == parent[u])
          return u;
          
          return parent[u]=findUParent(parent[u]);
      }
     
     void unionBySize(int u,int v)
     {
         int up_u=findUParent(u);
         int up_v=findUParent(v);
         
        if(up_v== up_u) 
        return ;
        
        if(size[up_u] < size[up_v])
        {
            parent[up_u]= up_v;
            
            size[up_v] += size[up_u];
        }
        
        else
        {
              parent[up_v]= up_u;
            
            size[up_u] += size[up_v];
        }
     }
     
     void unionByRank(int u, int v) {
        int up_u = findUParent(u);
        int up_v = findUParent(v);
        if (up_u == up_v) return;
        if (rank[up_u] < rank[up_v]) {
            parent[up_u] = up_v;
        }
        else if (rank[up_v] < rank[up_u]) {
            parent[up_v] = up_u;
        }
        else {
            parent[up_v] = up_u;
            rank[up_u]++;
        }
    }
};
